# -*- coding: utf-8 -*-
"""Implementation Of Fuzzy Algorithm On Scholarship-Recipients Selector

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AKw0trSgU01aACaFWSTh8wIFjCl_KlR1

# IMPORTED LIBRARIES
"""

import numpy as np
import pandas as pd
import io
import matplotlib.pyplot as plt
from google.colab import files

"""# CONSTANTS AND GLOBAL VARIABLES"""

InputArray = []
OutputArray = []

"""# IMPORTED/READ CRISP DATA"""

#READ CRISP INPUT
crispinput = files.upload()
df = pd.read_excel(io.BytesIO(crispinput['Mahasiswa.xls']))

#DEFINE IDS COLUMN AS AN ARRAY LIST
id = df['Id'].values.tolist()

#DEFINE EARNINGS COLUMN AS AN ARRAY LIST
earning = df['Penghasilan'].values.tolist()

#DEFINE SPENDINGS COLUMN AS AN ARRAY LIST
spending = df['Pengeluaran'].values.tolist()

"""# FUZZIFICATION : MEMBERSHIP FUNCTION FOR EARNINGS"""

#FUZZIFY THE LOW EARNINGS
def LowEarning(x):
  if x <= 4:
    return 1
  elif x >= 6:
    return 0
  else:
    return (6-x)/(6-4)
  
#FUZZIFY THE MEDIUM EARNINGS
def MediumEarning(x):
  if 6 <= x <= 12:
    return 1
  elif 4 < x < 6:
    return (x - 4)/(6 - 4)
  elif 12 < x < 15:
    return (15 - x)/(15 - 10)
  else:
    return 0

#FUZZIFY THE HIGH EARNINGS
def HighEarning(x):
  if x >= 15:
    return 1
  elif x <= 12:
    return 0
  else:
    return (x - 12)/(15 - 12)

def Income(x):
  Deficient = LowEarning(x)
  Sufficient = MediumEarning(x)
  Excessive = HighEarning(x)
  return Deficient, Sufficient, Excessive

"""# FUZZIFICATION : MEMBERSHIP FUNCTION FOR SPENDINGS"""

#FUZZIFY THE LOW SPENDINGS
def LowSpending(x):
  if x <= 4:
    return 1
  elif x >= 6:
    return 0
  else:
    return (6-x)/(6-4)

#FUZZIFY THE MEDIUM SPENDINGS
def MediumSpending(x):
  if 6 <= x <= 10:
    return 1
  elif 4 < x < 6:
    return (x - 4)/(6 - 4)
  elif 10 < x < 12:
    return (12 - x)/(12 - 10)
  else:
    return 0

#FUZZIFY THE HIGH SPENDINGS
def HighSpending(x):
  if x >= 12:
    return 1
  elif x <= 10:
    return 0
  else:
    return (x - 10)/(12 - 10)

def Expense(x):
  Efficient = LowSpending(x)
  Average = MediumSpending(x)
  Lavish = HighSpending(x)
  return Efficient, Average, Lavish

"""# INFERENCE : SUGENO MODEL"""

#Inferensi
def Inference(Small,Medium,Big,Tight,Normal,Profuse):
  FitnessSystem =[[min(Small,Tight),'High'],
                    [min(Medium,Tight),'Low'],
                    [min(Big,Tight),'Low'],
                    [min(Small,Normal),'High'],
                    [min(Medium,Normal),'High'],
                    [min(Big,Normal),'Low'],
                    [min(Small,Profuse),'High'],
                    [min(Medium,Profuse),'High'],
                    [min(Big,Profuse),'Low']]
  Low = []
  High = []

  for i in range(len(FitnessSystem)):
    if FitnessSystem[i][1] == 'High':
     High.append(FitnessSystem[i][0])
    elif FitnessSystem[i][1] == 'Low':
      Low.append(FitnessSystem[i][0])
  return max(High), max(Low)

"""# DEFUZZYFICATION : WEIGHTED AVERAGE"""

def defuzzification(High,Low):
  return ((High * 100) + (Low * 35)) / (High + Low)

"""# MAIN"""

def main(earning, spending):
  Small, Medium, Big = Income(earning[i])
  Tight, Normal, Profuse = Expense(spending[i])
  High, Low = Inference(Small,Medium,Big,Tight,Normal,Profuse)
  n = defuzzification(High, Low)
  InputArray.append([n, (i+1)])  
  return InputArray

for i in range(100):
  x = earning[i]
  y = spending[i]
  FinalArray = main(earning, spending)
  FinalArray.sort(reverse = True)

for i in range (0, 20):
  OutputArray.append(FinalArray[i][1])
  OutputArray.sort(reverse = True)

df = pd.DataFrame(OutputArray)
with pd.ExcelWriter('Bantuan.xls', mode='w') as writer:
  df.to_excel(writer, sheet_name='Bantuan', index=False,header=['Id'])
files.download('Bantuan.xls')